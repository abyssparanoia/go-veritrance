openapi: 3.0.2
info:
  contact:
    name: Veritrance
  description: |
    Veritrance API
    Requestの形式はcomponentsを参照。文字列にしたものを各Requestのparamsに用いる
  title: Veritrance API
  version: 3.0.0
servers:
- description: Production
  url: https://api.veritrans.co.jp:443
paths:
  /paynowid/v1/Add/account:
    post:
      description: |
        ・会員 ID を登録します。
        ・会員 ID の登録と同時に、カード情報および継続課金情報を紐付けることが可能です。
          継続課金情報を設定する際は、カード情報の同時設定が必要です。
          カード情報を指定した場合、有効性確認が行われます。
        ・会員 ID の登録と同時に、カード情報のみを紐付けることが可能です。
      operationId: paynowid-v1-add-account
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
          description: 成功した場合
      summary: 会員情報を追加します。
      tags:
      - Account
  /paynowid/v1/Update/account:
    post:
      description: |
        ・会員 ID の「入会年月日」を更新します。
      operationId: paynowid-v1-update-account
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/paynowid_v1_update_account_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayNowIdResponse'
          description: 成功した場合
      summary: 会員 ID の「入会年月日」を更新します。
      tags:
      - Account
  /paynowid/v1/Delete/account:
    post:
      description: |
        ・会員 ID の会員情報を、指定された「退会年月日」に削除します。
      operationId: paynowid-v1-delete-account
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/paynowid_v1_update_account_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayNowIdResponse'
          description: 成功した場合
      summary: 会員 ID の会員情報を、指定された「退会年月日」に削除します。
      tags:
      - Account
  /paynowid/v1/Get/cardinfo:
    post:
      description: |
        ・会員 ID に紐付けられた課金情報を取得します。
      operationId: paynowid-v1-get-cardinfo
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/paynowid_v1_update_account_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
          description: 成功した場合
      summary: 会員 ID に紐付けられた課金情報を取得します
      tags:
      - Cardinfo
  /paynowid/v1/Add/cardinfo:
    post:
      description: |
        ・会員 ID にカード情報を紐付けて登録します。
        ・当該会員 ID に複数のカード情報を紐付けることが可能です。 ただし、同じカード情報を 2 回登録することはできません。
          （一度削除したカード情報を、再度登録することは可能です）
      operationId: paynowid-v1-add-cardinfo
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/paynowid_v1_update_account_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
          description: 成功した場合
      summary: 会員 ID にカード情報を紐付けて登録します
      tags:
      - Cardinfo
  /paynowid/v1/Update/cardinfo:
    post:
      description: "・当該会員 ID、およびカード ID に紐付けられたカード情報を更新します。 \n"
      operationId: paynowid-v1-update-cardinfo
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/paynowid_v1_update_account_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
          description: 成功した場合
      summary: 当該会員 ID、およびカード ID に紐付けられたカード情報を更新します
      tags:
      - Cardinfo
  /paynowid/v1/Delete/cardinfo:
    post:
      description: |
        ・会員 ID に紐付けられたカード情報を削除します。
      operationId: paynowid-v1-delete-cardinfo
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/paynowid_v1_update_account_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayNowIdResponse'
          description: 成功した場合
      summary: 会員 ID に紐付けられたカード情報を削除します
      tags:
      - Cardinfo
  /paynowid/v1/Authorize/card:
    post:
      operationId: paynowid-v1-authorize-cardinfo
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/paynowid_v1_update_account_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardAuthorizeResponse'
          description: 成功した場合
      summary: 決済の与信を行います
      tags:
      - Card
  /paynowid/v1/ReAuthorize/card:
    post:
      operationId: paynowid-v1-reAuthorize-cardinfo
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/paynowid_v1_update_account_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardAuthorizeResponse'
          description: 成功した場合
      summary: 決済の再与信を行います
      tags:
      - Card
  /paynowid/v1/Capture/card:
    post:
      operationId: paynowid-v1-capture-cardinfo
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/paynowid_v1_update_account_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardCaptureResponse'
          description: 成功した場合
      summary: 決済の売上確定を行います
      tags:
      - Card
  /paynowid/v1/Cancel/card:
    post:
      operationId: paynowid-v1-cancel-cardinfo
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/paynowid_v1_update_account_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardCancelResponse'
          description: 成功した場合
      summary: 決済のキャンセルを行います
      tags:
      - Card
components:
  schemas:
    AccountAddRequest:
      allOf:
      - $ref: '#/components/schemas/AbstractPayNowRequest'
      - $ref: '#/components/schemas/AccountAddRequest_allOf'
      required:
      - accountId
      type: object
    AccountDeleteRequest:
      allOf:
      - $ref: '#/components/schemas/AbstractPayNowRequest'
      - $ref: '#/components/schemas/AccountDeleteRequest_allOf'
      required:
      - accountId
      type: object
    AccountUpdateRequest:
      allOf:
      - $ref: '#/components/schemas/AbstractPayNowRequest'
      - $ref: '#/components/schemas/AccountDeleteRequest_allOf'
      required:
      - accountId
      type: object
    CardInfoGetRequest:
      allOf:
      - $ref: '#/components/schemas/AbstractPayNowRequest'
      - $ref: '#/components/schemas/AccountDeleteRequest_allOf'
      required:
      - accountId
      type: object
    CardInfoAddRequest:
      allOf:
      - $ref: '#/components/schemas/AbstractPayNowRequest'
      - $ref: '#/components/schemas/CardInfoAddRequest_allOf'
      required:
      - token
      type: object
    CardInfoUpdateRequest:
      allOf:
      - $ref: '#/components/schemas/AbstractPayNowRequest'
      - $ref: '#/components/schemas/CardInfoUpdateRequest_allOf'
      required:
      - accountId
      - cardExpire
      - cardId
      - cardNumber
      - securityCode
      type: object
    CardInfoDeleteRequest:
      allOf:
      - $ref: '#/components/schemas/AbstractPayNowRequest'
      - $ref: '#/components/schemas/CardInfoDeleteRequest_allOf'
      required:
      - accountId
      type: object
    CardAuthorizeRequest:
      allOf:
      - $ref: '#/components/schemas/AbstractPayNowRequest'
      - $ref: '#/components/schemas/CardAuthorizeRequest_allOf'
      required:
      - orderId
      - originalOrderId
      type: object
    CardReAuthorizeRequest:
      allOf:
      - $ref: '#/components/schemas/AbstractPayNowRequest'
      - $ref: '#/components/schemas/CardReAuthorizeRequest_allOf'
      required:
      - amount
      - orderId
      type: object
    CardCaptureRequest:
      allOf:
      - $ref: '#/components/schemas/AbstractPayNowRequest'
      - $ref: '#/components/schemas/CardCaptureRequest_allOf'
      required:
      - amount
      - orderId
      type: object
    CardCancelRequest:
      allOf:
      - $ref: '#/components/schemas/AbstractPayNowRequest'
      - $ref: '#/components/schemas/CardCaptureRequest_allOf'
      required:
      - amount
      - orderId
      type: object
    AbstractPayNowRequest:
      description: PayNowのリクエストに必須なパラメーター群
      properties:
        txnVersion:
          type: string
        dummyRequest:
          type: string
        merchantCcid:
          type: string
      required:
      - dummyRequest
      - merchantCcid
      - txnVersion
      type: object
    AccountResponse:
      example:
        payNowIdResponse: null
      properties:
        payNowIdResponse:
          $ref: '#/components/schemas/AccountResponse_payNowIdResponse'
      type: object
    AbstractPayNowIdResponse:
      example:
        processId: processId
        message: message
        status: success
      properties:
        processId:
          description: 会員管理処理を一意に識別する番号
          type: string
        status:
          description: 会員管理処理要求の実行結果
          enum:
          - success
          - failure
          type: string
        message:
          description: 会員管理処理要求の実行結果メッセージ
          type: string
      required:
      - message
      - processId
      - status
      type: object
    PayNowIdResponse:
      example:
        payNowIdResponse:
          processId: processId
          message: message
          status: success
      properties:
        payNowIdResponse:
          $ref: '#/components/schemas/AbstractPayNowIdResponse'
      type: object
    CardAuthorizeResponse:
      example:
        serviceType: serviceType
        centerReferenceNumber: centerReferenceNumber
        txnVersion: txnVersion
        gatewayRequestDate: 2000-01-23T04:56:07.000+00:00
        orderId: orderId
        centerRequestNumber: centerRequestNumber
        pending: 0
        gatewayResponseDate: 2000-01-23T04:56:07.000+00:00
        centerRequestDate: 2000-01-23T04:56:07.000+00:00
        centerResponseDate: 2000-01-23T04:56:07.000+00:00
        custTxn: custTxn
        marchTxn: marchTxn
        resReturnReferenceNumber: resReturnReferenceNumber
        connectedCenterId: jcn
        merrMsg: merrMsg
        resAuthCode: resAuthCode
        resActionCode: resActionCode
        resCenterErrorCode: resCenterErrorCode
        cardTransactiontype: cardTransactiontype
        acquirerCode: acquirerCode
        vResultCode: vResultCode
        status: success
        loopback: 6
      properties:
        serviceType:
          description: 要求電文を送信した決済サービスタイプ
          type: string
        status:
          description: 処理結果コード
          enum:
          - success
          - failure
          - pending
          type: string
        vResultCode:
          description: |
            処理の結果を詳細に表すコード
            4 桁ずつ 4 つのブロックで構成され、各ブロックでサービス毎の処理結果を表します。
          type: string
        merrMsg:
          description: 処理結果を日本語で表示します。
          type: string
        marchTxn:
          description: |
            決済サーバーにて決済処理電文（内部処理も含む）毎に付与する ID
            １つの取引 ID に対して、複数の ID が付与されます。
          type: string
        orderId:
          description: 決済要求時に店舗様にて任意に採番し送信された取引 ID
          type: string
        custTxn:
          description: 決済サーバーがオーダー（取引 ID）と紐付ける為に採番する ID
          type: string
        txnVersion:
          description: 電文のバージョン
          type: string
        cardTransactiontype:
          type: string
        gatewayRequestDate:
          format: date-time
          type: string
        gatewayResponseDate:
          format: date-time
          type: string
        centerRequestDate:
          format: date-time
          type: string
        centerResponseDate:
          format: date-time
          type: string
        pending:
          type: integer
        loopback:
          type: integer
        connectedCenterId:
          enum:
          - jcn
          - cafis
          type: string
        centerRequestNumber:
          type: string
        centerReferenceNumber:
          type: string
        resReturnReferenceNumber:
          type: string
        resAuthCode:
          type: string
        resActionCode:
          type: string
        resCenterErrorCode:
          type: string
        acquirerCode:
          type: string
      type: object
    CardCaptureResponse:
      example:
        serviceType: serviceType
        centerReferenceNumber: centerReferenceNumber
        txnVersion: txnVersion
        gatewayRequestDate: 2000-01-23T04:56:07.000+00:00
        orderId: orderId
        centerRequestNumber: centerRequestNumber
        pending: 0
        gatewayResponseDate: 2000-01-23T04:56:07.000+00:00
        centerRequestDate: 2000-01-23T04:56:07.000+00:00
        centerResponseDate: 2000-01-23T04:56:07.000+00:00
        custTxn: custTxn
        marchTxn: marchTxn
        resReturnReferenceNumber: resReturnReferenceNumber
        connectedCenterId: jcn
        merrMsg: merrMsg
        resAuthCode: resAuthCode
        resActionCode: resActionCode
        resCenterErrorCode: resCenterErrorCode
        cardTransactiontype: cardTransactiontype
        acquirerCode: acquirerCode
        vResultCode: vResultCode
        status: success
        loopback: 6
      properties:
        serviceType:
          description: 要求電文を送信した決済サービスタイプ
          type: string
        status:
          description: 処理結果コード
          enum:
          - success
          - failure
          - pending
          type: string
        vResultCode:
          description: |
            処理の結果を詳細に表すコード
            4 桁ずつ 4 つのブロックで構成され、各ブロックでサービス毎の処理結果を表します。
          type: string
        merrMsg:
          description: 処理結果を日本語で表示します。
          type: string
        marchTxn:
          description: |
            決済サーバーにて決済処理電文（内部処理も含む）毎に付与する ID
            １つの取引 ID に対して、複数の ID が付与されます。
          type: string
        orderId:
          description: 決済要求時に店舗様にて任意に採番し送信された取引 ID
          type: string
        custTxn:
          description: 決済サーバーがオーダー（取引 ID）と紐付ける為に採番する ID
          type: string
        txnVersion:
          description: 電文のバージョン
          type: string
        cardTransactiontype:
          type: string
        gatewayRequestDate:
          format: date-time
          type: string
        gatewayResponseDate:
          format: date-time
          type: string
        centerRequestDate:
          format: date-time
          type: string
        centerResponseDate:
          format: date-time
          type: string
        pending:
          type: integer
        loopback:
          type: integer
        connectedCenterId:
          enum:
          - jcn
          - cafis
          type: string
        centerRequestNumber:
          type: string
        centerReferenceNumber:
          type: string
        resReturnReferenceNumber:
          type: string
        resAuthCode:
          type: string
        resActionCode:
          type: string
        resCenterErrorCode:
          type: string
        acquirerCode:
          type: string
      type: object
    CardCancelResponse:
      example:
        serviceType: serviceType
        centerReferenceNumber: centerReferenceNumber
        txnVersion: txnVersion
        gatewayRequestDate: 2000-01-23T04:56:07.000+00:00
        orderId: orderId
        centerRequestNumber: centerRequestNumber
        pending: 0
        gatewayResponseDate: 2000-01-23T04:56:07.000+00:00
        centerRequestDate: 2000-01-23T04:56:07.000+00:00
        centerResponseDate: 2000-01-23T04:56:07.000+00:00
        custTxn: custTxn
        marchTxn: marchTxn
        resReturnReferenceNumber: resReturnReferenceNumber
        connectedCenterId: jcn
        merrMsg: merrMsg
        resAuthCode: resAuthCode
        resActionCode: resActionCode
        resCenterErrorCode: resCenterErrorCode
        cardTransactiontype: cardTransactiontype
        acquirerCode: acquirerCode
        vResultCode: vResultCode
        status: success
        loopback: 6
      properties:
        serviceType:
          description: 要求電文を送信した決済サービスタイプ
          type: string
        status:
          description: 処理結果コード
          enum:
          - success
          - failure
          - pending
          type: string
        vResultCode:
          description: |
            処理の結果を詳細に表すコード
            4 桁ずつ 4 つのブロックで構成され、各ブロックでサービス毎の処理結果を表します。
          type: string
        merrMsg:
          description: 処理結果を日本語で表示します。
          type: string
        marchTxn:
          description: |
            決済サーバーにて決済処理電文（内部処理も含む）毎に付与する ID
            １つの取引 ID に対して、複数の ID が付与されます。
          type: string
        orderId:
          description: 決済要求時に店舗様にて任意に採番し送信された取引 ID
          type: string
        custTxn:
          description: 決済サーバーがオーダー（取引 ID）と紐付ける為に採番する ID
          type: string
        txnVersion:
          description: 電文のバージョン
          type: string
        cardTransactiontype:
          type: string
        gatewayRequestDate:
          format: date-time
          type: string
        gatewayResponseDate:
          format: date-time
          type: string
        centerRequestDate:
          format: date-time
          type: string
        centerResponseDate:
          format: date-time
          type: string
        pending:
          type: integer
        loopback:
          type: integer
        connectedCenterId:
          enum:
          - jcn
          - cafis
          type: string
        centerRequestNumber:
          type: string
        centerReferenceNumber:
          type: string
        resReturnReferenceNumber:
          type: string
        resAuthCode:
          type: string
        resActionCode:
          type: string
        resCenterErrorCode:
          type: string
        acquirerCode:
          type: string
      type: object
    account.v1:
      description: 会員情報
      properties:
        accountId:
          example: account-1662828780
          type: string
        cardInfo:
          items:
            $ref: '#/components/schemas/card_info.v1'
          type: array
      required:
      - accountId
      title: account
      type: object
    card_info.v1:
      description: カード情報
      properties:
        cardId:
          description: 決済サーバーにて付与されたカード ID が返戻されます。
          type: string
        cardNumber:
          description: カード番号の先頭 6 桁と下 2 桁のみ数字表記され、その他は "*"（アスタリスク）に変換されます。
          example: 411111********11
          type: string
        cardExpire:
          example: 12/25
          type: string
        defaultCard:
          description: |
            カード情報を明示的に指定せず決済する場合に使用するカードか否かを示すフラグ
            "1"：決済時、カード情報を明示的に指定しない場合に使用されるカード
            "0"：決済時、カード情報を明示的に指定しない場合に使用されるカードではない
          type: integer
        cardholderName:
          description: カードの名義人
          type: string
      required:
      - cardExpire
      - cardId
      - cardNumber
      - defaultCard
      title: card_info
      type: object
    paynowid_v1_update_account_request:
      properties:
        params:
          type: string
        authHash:
          type: string
      required:
      - authHash
      - params
      type: object
    AccountAddRequest_allOf:
      properties:
        accountId:
          example: account-1662828780
          type: string
        cardNumber:
          example: "4111111111111111"
          type: string
        cardExpire:
          example: 12/25
          type: string
        securityCode:
          example: "123"
          type: string
      type: object
    AccountDeleteRequest_allOf:
      properties:
        accountId:
          example: account-1662828780
          type: string
      type: object
    CardInfoAddRequest_allOf_payNowIdParam_accountParam_cardParam:
      properties:
        token:
          example: 80b66157-6f6f-4a38-a6e4-43e306f0084f
          type: string
      required:
      - token
      type: object
    CardInfoAddRequest_allOf_payNowIdParam_accountParam:
      properties:
        accountId:
          example: account-1662828780
          type: string
        cardParam:
          $ref: '#/components/schemas/CardInfoAddRequest_allOf_payNowIdParam_accountParam_cardParam'
      required:
      - accountId
      - cardParam
      type: object
    CardInfoAddRequest_allOf_payNowIdParam:
      properties:
        accountParam:
          $ref: '#/components/schemas/CardInfoAddRequest_allOf_payNowIdParam_accountParam'
      required:
      - accountParam
      type: object
    CardInfoAddRequest_allOf:
      properties:
        payNowIdParam:
          $ref: '#/components/schemas/CardInfoAddRequest_allOf_payNowIdParam'
      required:
      - payNowIdParam
      type: object
    CardInfoUpdateRequest_allOf:
      properties:
        accountId:
          example: account-1662828780
          type: string
        cardId:
          example: card-1662828780
          type: string
        cardNumber:
          example: "4111111111111111"
          type: string
        cardExpire:
          example: 12/25
          type: string
        securityCode:
          example: "123"
          type: string
      type: object
    CardInfoDeleteRequest_allOf:
      properties:
        accountId:
          example: account-1662828780
          type: string
        cardId:
          example: card-1662828780
          type: string
      type: object
    CardAuthorizeRequest_allOf:
      properties:
        orderId:
          example: order-1662828780
          type: string
        originalOrderId:
          example: order-1662828781
          type: string
        amount:
          example: "1000"
          type: string
        token:
          description: トークンサーバーが発行した、クレジットカード情報の識別に用いるトークンの値
          example: abcdef01-2345-6789-abcd-ef0123456789
          type: string
        cardNumber:
          description: （重要）カード情報の非保持（非通過、非保持）への対応のため、通常は設定しないでください。
          example: "4111111111111111"
          type: string
        cardExpire:
          description: （重要）カード情報の非保持（非通過、非保持）への対応のため、通常は設定しないでください。
          example: 12/25
          type: string
        securityCode:
          description: （重要）カード情報の非保持（非通過、非保持）への対応のため、通常は設定しないでください。
          example: "123"
          type: string
        cardOptionType:
          description: カードオプションタイプ （MPI 有り/無し）
          enum:
          - mpi
          type: string
        jpo:
          description: |
            支払種別
            "10"： 一括払い
            "21"： ボーナス一括
            "61Cxx"： 分割払い、xx に分割回数指定
            “80”： リボルビング払い
            ※指定が無い場合は、"10"（一括払い）が適用されます。
          type: string
        withCapture:
          description: |
            売上フラグ
            "true"： 与信・売上
            "false"： 与信のみ
          type: boolean
      type: object
    CardReAuthorizeRequest_allOf:
      properties:
        orderId:
          example: order-1662828780
          type: string
        amount:
          example: "1000"
          type: string
        token:
          description: トークンサーバーが発行した、クレジットカード情報の識別に用いるトークンの値
          example: abcdef01-2345-6789-abcd-ef0123456789
          type: string
        cardNumber:
          description: （重要）カード情報の非保持（非通過、非保持）への対応のため、通常は設定しないでください。
          example: "4111111111111111"
          type: string
        cardExpire:
          description: （重要）カード情報の非保持（非通過、非保持）への対応のため、通常は設定しないでください。
          example: 12/25
          type: string
        securityCode:
          description: （重要）カード情報の非保持（非通過、非保持）への対応のため、通常は設定しないでください。
          example: "123"
          type: string
        cardOptionType:
          description: カードオプションタイプ （MPI 有り/無し）
          enum:
          - mpi
          type: string
        jpo:
          description: |
            支払種別
            "10"： 一括払い
            "21"： ボーナス一括
            "61Cxx"： 分割払い、xx に分割回数指定
            “80”： リボルビング払い
            ※指定が無い場合は、"10"（一括払い）が適用されます。
          type: string
        withCapture:
          description: |
            売上フラグ
            "true"： 与信・売上
            "false"： 与信のみ
          type: boolean
      type: object
    CardCaptureRequest_allOf:
      properties:
        orderId:
          example: order-1662828780
          type: string
        amount:
          example: "1000"
          type: string
      type: object
    AccountResponse_payNowIdResponse_allOf:
      properties:
        account:
          $ref: '#/components/schemas/account.v1'
      type: object
    AccountResponse_payNowIdResponse:
      allOf:
      - $ref: '#/components/schemas/AbstractPayNowIdResponse'
      - $ref: '#/components/schemas/AccountResponse_payNowIdResponse_allOf'
      type: object
