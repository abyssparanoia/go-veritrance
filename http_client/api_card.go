/*
Veritrance API

Veritrance API 

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package veritrance_paynow

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// CardApiService CardApi service
type CardApiService service

type ApiPaynowV2AuthorizeCardinfoRequest struct {
	ctx context.Context
	ApiService *CardApiService
	orderId *string
	originalOrderId *string
	amount *string
	token *string
	cardNumber *string
	cardExpire *string
	securityCode *string
	cardOptionType *string
	jpo *string
	withCapture *bool
}

func (r ApiPaynowV2AuthorizeCardinfoRequest) OrderId(orderId string) ApiPaynowV2AuthorizeCardinfoRequest {
	r.orderId = &orderId
	return r
}

func (r ApiPaynowV2AuthorizeCardinfoRequest) OriginalOrderId(originalOrderId string) ApiPaynowV2AuthorizeCardinfoRequest {
	r.originalOrderId = &originalOrderId
	return r
}

func (r ApiPaynowV2AuthorizeCardinfoRequest) Amount(amount string) ApiPaynowV2AuthorizeCardinfoRequest {
	r.amount = &amount
	return r
}

// トークンサーバーが発行した、クレジットカード情報の識別に用いるトークンの値
func (r ApiPaynowV2AuthorizeCardinfoRequest) Token(token string) ApiPaynowV2AuthorizeCardinfoRequest {
	r.token = &token
	return r
}

// （重要）カード情報の非保持（非通過、非保持）への対応のため、通常は設定しないでください。
func (r ApiPaynowV2AuthorizeCardinfoRequest) CardNumber(cardNumber string) ApiPaynowV2AuthorizeCardinfoRequest {
	r.cardNumber = &cardNumber
	return r
}

// （重要）カード情報の非保持（非通過、非保持）への対応のため、通常は設定しないでください。
func (r ApiPaynowV2AuthorizeCardinfoRequest) CardExpire(cardExpire string) ApiPaynowV2AuthorizeCardinfoRequest {
	r.cardExpire = &cardExpire
	return r
}

// （重要）カード情報の非保持（非通過、非保持）への対応のため、通常は設定しないでください。
func (r ApiPaynowV2AuthorizeCardinfoRequest) SecurityCode(securityCode string) ApiPaynowV2AuthorizeCardinfoRequest {
	r.securityCode = &securityCode
	return r
}

// カードオプションタイプ （MPI 有り/無し）
func (r ApiPaynowV2AuthorizeCardinfoRequest) CardOptionType(cardOptionType string) ApiPaynowV2AuthorizeCardinfoRequest {
	r.cardOptionType = &cardOptionType
	return r
}

// 支払種別 \\\&quot;10\\\&quot;： 一括払い \\\&quot;21\\\&quot;： ボーナス一括 \\\&quot;61Cxx\\\&quot;： 分割払い、xx に分割回数指定 “80”： リボルビング払い ※指定が無い場合は、\\\&quot;10\\\&quot;（一括払い）が適用されます。 
func (r ApiPaynowV2AuthorizeCardinfoRequest) Jpo(jpo string) ApiPaynowV2AuthorizeCardinfoRequest {
	r.jpo = &jpo
	return r
}

// 売上フラグ \\\&quot;true\\\&quot;： 与信・売上 \\\&quot;false\\\&quot;： 与信のみ 
func (r ApiPaynowV2AuthorizeCardinfoRequest) WithCapture(withCapture bool) ApiPaynowV2AuthorizeCardinfoRequest {
	r.withCapture = &withCapture
	return r
}

func (r ApiPaynowV2AuthorizeCardinfoRequest) Execute() (*CardAuthorizeResponse, *http.Response, error) {
	return r.ApiService.PaynowV2AuthorizeCardinfoExecute(r)
}

/*
PaynowV2AuthorizeCardinfo 決済の与信を行います

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPaynowV2AuthorizeCardinfoRequest
*/
func (a *CardApiService) PaynowV2AuthorizeCardinfo(ctx context.Context) ApiPaynowV2AuthorizeCardinfoRequest {
	return ApiPaynowV2AuthorizeCardinfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CardAuthorizeResponse
func (a *CardApiService) PaynowV2AuthorizeCardinfoExecute(r ApiPaynowV2AuthorizeCardinfoRequest) (*CardAuthorizeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardAuthorizeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardApiService.PaynowV2AuthorizeCardinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/paynow/v2/Authorize/card"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.orderId == nil {
		return localVarReturnValue, nil, reportError("orderId is required and must be specified")
	}
	if r.originalOrderId == nil {
		return localVarReturnValue, nil, reportError("originalOrderId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("orderId", parameterToString(*r.orderId, ""))
	localVarFormParams.Add("originalOrderId", parameterToString(*r.originalOrderId, ""))
	if r.amount != nil {
		localVarFormParams.Add("amount", parameterToString(*r.amount, ""))
	}
	if r.token != nil {
		localVarFormParams.Add("token", parameterToString(*r.token, ""))
	}
	if r.cardNumber != nil {
		localVarFormParams.Add("cardNumber", parameterToString(*r.cardNumber, ""))
	}
	if r.cardExpire != nil {
		localVarFormParams.Add("cardExpire", parameterToString(*r.cardExpire, ""))
	}
	if r.securityCode != nil {
		localVarFormParams.Add("securityCode", parameterToString(*r.securityCode, ""))
	}
	if r.cardOptionType != nil {
		localVarFormParams.Add("cardOptionType", parameterToString(*r.cardOptionType, ""))
	}
	if r.jpo != nil {
		localVarFormParams.Add("jpo", parameterToString(*r.jpo, ""))
	}
	if r.withCapture != nil {
		localVarFormParams.Add("withCapture", parameterToString(*r.withCapture, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPaynowV2CancelCardinfoRequest struct {
	ctx context.Context
	ApiService *CardApiService
	orderId *string
	amount *string
}

func (r ApiPaynowV2CancelCardinfoRequest) OrderId(orderId string) ApiPaynowV2CancelCardinfoRequest {
	r.orderId = &orderId
	return r
}

func (r ApiPaynowV2CancelCardinfoRequest) Amount(amount string) ApiPaynowV2CancelCardinfoRequest {
	r.amount = &amount
	return r
}

func (r ApiPaynowV2CancelCardinfoRequest) Execute() (*CardCancelResponse, *http.Response, error) {
	return r.ApiService.PaynowV2CancelCardinfoExecute(r)
}

/*
PaynowV2CancelCardinfo 決済のキャンセルを行います

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPaynowV2CancelCardinfoRequest
*/
func (a *CardApiService) PaynowV2CancelCardinfo(ctx context.Context) ApiPaynowV2CancelCardinfoRequest {
	return ApiPaynowV2CancelCardinfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CardCancelResponse
func (a *CardApiService) PaynowV2CancelCardinfoExecute(r ApiPaynowV2CancelCardinfoRequest) (*CardCancelResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardCancelResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardApiService.PaynowV2CancelCardinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/paynow/v2/Cancel/card"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.orderId == nil {
		return localVarReturnValue, nil, reportError("orderId is required and must be specified")
	}
	if r.amount == nil {
		return localVarReturnValue, nil, reportError("amount is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("orderId", parameterToString(*r.orderId, ""))
	localVarFormParams.Add("amount", parameterToString(*r.amount, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPaynowV2CaptureCardinfoRequest struct {
	ctx context.Context
	ApiService *CardApiService
	orderId *string
	amount *string
}

func (r ApiPaynowV2CaptureCardinfoRequest) OrderId(orderId string) ApiPaynowV2CaptureCardinfoRequest {
	r.orderId = &orderId
	return r
}

func (r ApiPaynowV2CaptureCardinfoRequest) Amount(amount string) ApiPaynowV2CaptureCardinfoRequest {
	r.amount = &amount
	return r
}

func (r ApiPaynowV2CaptureCardinfoRequest) Execute() (*CardCaptureResponse, *http.Response, error) {
	return r.ApiService.PaynowV2CaptureCardinfoExecute(r)
}

/*
PaynowV2CaptureCardinfo 決済の売上確定を行います

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPaynowV2CaptureCardinfoRequest
*/
func (a *CardApiService) PaynowV2CaptureCardinfo(ctx context.Context) ApiPaynowV2CaptureCardinfoRequest {
	return ApiPaynowV2CaptureCardinfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CardCaptureResponse
func (a *CardApiService) PaynowV2CaptureCardinfoExecute(r ApiPaynowV2CaptureCardinfoRequest) (*CardCaptureResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardCaptureResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardApiService.PaynowV2CaptureCardinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/paynow/v2/Capture/card"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.orderId == nil {
		return localVarReturnValue, nil, reportError("orderId is required and must be specified")
	}
	if r.amount == nil {
		return localVarReturnValue, nil, reportError("amount is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("orderId", parameterToString(*r.orderId, ""))
	localVarFormParams.Add("amount", parameterToString(*r.amount, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPaynowV2ReAuthorizeCardinfoRequest struct {
	ctx context.Context
	ApiService *CardApiService
	orderId *string
	amount *string
	token *string
	cardNumber *string
	cardExpire *string
	securityCode *string
	cardOptionType *string
	jpo *string
	withCapture *bool
}

func (r ApiPaynowV2ReAuthorizeCardinfoRequest) OrderId(orderId string) ApiPaynowV2ReAuthorizeCardinfoRequest {
	r.orderId = &orderId
	return r
}

func (r ApiPaynowV2ReAuthorizeCardinfoRequest) Amount(amount string) ApiPaynowV2ReAuthorizeCardinfoRequest {
	r.amount = &amount
	return r
}

// トークンサーバーが発行した、クレジットカード情報の識別に用いるトークンの値
func (r ApiPaynowV2ReAuthorizeCardinfoRequest) Token(token string) ApiPaynowV2ReAuthorizeCardinfoRequest {
	r.token = &token
	return r
}

// （重要）カード情報の非保持（非通過、非保持）への対応のため、通常は設定しないでください。
func (r ApiPaynowV2ReAuthorizeCardinfoRequest) CardNumber(cardNumber string) ApiPaynowV2ReAuthorizeCardinfoRequest {
	r.cardNumber = &cardNumber
	return r
}

// （重要）カード情報の非保持（非通過、非保持）への対応のため、通常は設定しないでください。
func (r ApiPaynowV2ReAuthorizeCardinfoRequest) CardExpire(cardExpire string) ApiPaynowV2ReAuthorizeCardinfoRequest {
	r.cardExpire = &cardExpire
	return r
}

// （重要）カード情報の非保持（非通過、非保持）への対応のため、通常は設定しないでください。
func (r ApiPaynowV2ReAuthorizeCardinfoRequest) SecurityCode(securityCode string) ApiPaynowV2ReAuthorizeCardinfoRequest {
	r.securityCode = &securityCode
	return r
}

// カードオプションタイプ （MPI 有り/無し）
func (r ApiPaynowV2ReAuthorizeCardinfoRequest) CardOptionType(cardOptionType string) ApiPaynowV2ReAuthorizeCardinfoRequest {
	r.cardOptionType = &cardOptionType
	return r
}

// 支払種別 \\\&quot;10\\\&quot;： 一括払い \\\&quot;21\\\&quot;： ボーナス一括 \\\&quot;61Cxx\\\&quot;： 分割払い、xx に分割回数指定 “80”： リボルビング払い ※指定が無い場合は、\\\&quot;10\\\&quot;（一括払い）が適用されます。 
func (r ApiPaynowV2ReAuthorizeCardinfoRequest) Jpo(jpo string) ApiPaynowV2ReAuthorizeCardinfoRequest {
	r.jpo = &jpo
	return r
}

// 売上フラグ \\\&quot;true\\\&quot;： 与信・売上 \\\&quot;false\\\&quot;： 与信のみ 
func (r ApiPaynowV2ReAuthorizeCardinfoRequest) WithCapture(withCapture bool) ApiPaynowV2ReAuthorizeCardinfoRequest {
	r.withCapture = &withCapture
	return r
}

func (r ApiPaynowV2ReAuthorizeCardinfoRequest) Execute() (*CardAuthorizeResponse, *http.Response, error) {
	return r.ApiService.PaynowV2ReAuthorizeCardinfoExecute(r)
}

/*
PaynowV2ReAuthorizeCardinfo 決済の再与信を行います

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPaynowV2ReAuthorizeCardinfoRequest
*/
func (a *CardApiService) PaynowV2ReAuthorizeCardinfo(ctx context.Context) ApiPaynowV2ReAuthorizeCardinfoRequest {
	return ApiPaynowV2ReAuthorizeCardinfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CardAuthorizeResponse
func (a *CardApiService) PaynowV2ReAuthorizeCardinfoExecute(r ApiPaynowV2ReAuthorizeCardinfoRequest) (*CardAuthorizeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardAuthorizeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardApiService.PaynowV2ReAuthorizeCardinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/paynow/v2/ReAuthorize/card"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.orderId == nil {
		return localVarReturnValue, nil, reportError("orderId is required and must be specified")
	}
	if r.amount == nil {
		return localVarReturnValue, nil, reportError("amount is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("orderId", parameterToString(*r.orderId, ""))
	localVarFormParams.Add("amount", parameterToString(*r.amount, ""))
	if r.token != nil {
		localVarFormParams.Add("token", parameterToString(*r.token, ""))
	}
	if r.cardNumber != nil {
		localVarFormParams.Add("cardNumber", parameterToString(*r.cardNumber, ""))
	}
	if r.cardExpire != nil {
		localVarFormParams.Add("cardExpire", parameterToString(*r.cardExpire, ""))
	}
	if r.securityCode != nil {
		localVarFormParams.Add("securityCode", parameterToString(*r.securityCode, ""))
	}
	if r.cardOptionType != nil {
		localVarFormParams.Add("cardOptionType", parameterToString(*r.cardOptionType, ""))
	}
	if r.jpo != nil {
		localVarFormParams.Add("jpo", parameterToString(*r.jpo, ""))
	}
	if r.withCapture != nil {
		localVarFormParams.Add("withCapture", parameterToString(*r.withCapture, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
