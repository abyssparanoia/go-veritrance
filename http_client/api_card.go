/*
Veritrance API

Veritrance API Requestの形式はcomponentsを参照。文字列にしたものを各Requestのparamsに用いる 

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package veritrance_paynow

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// CardApiService CardApi service
type CardApiService service

type ApiPaynowidV1AuthorizeCardinfoRequest struct {
	ctx context.Context
	ApiService *CardApiService
	params *string
	authHash *string
}

func (r ApiPaynowidV1AuthorizeCardinfoRequest) Params(params string) ApiPaynowidV1AuthorizeCardinfoRequest {
	r.params = &params
	return r
}

func (r ApiPaynowidV1AuthorizeCardinfoRequest) AuthHash(authHash string) ApiPaynowidV1AuthorizeCardinfoRequest {
	r.authHash = &authHash
	return r
}

func (r ApiPaynowidV1AuthorizeCardinfoRequest) Execute() (*CardAuthorizeResponse, *http.Response, error) {
	return r.ApiService.PaynowidV1AuthorizeCardinfoExecute(r)
}

/*
PaynowidV1AuthorizeCardinfo 決済の与信を行います

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPaynowidV1AuthorizeCardinfoRequest
*/
func (a *CardApiService) PaynowidV1AuthorizeCardinfo(ctx context.Context) ApiPaynowidV1AuthorizeCardinfoRequest {
	return ApiPaynowidV1AuthorizeCardinfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CardAuthorizeResponse
func (a *CardApiService) PaynowidV1AuthorizeCardinfoExecute(r ApiPaynowidV1AuthorizeCardinfoRequest) (*CardAuthorizeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardAuthorizeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardApiService.PaynowidV1AuthorizeCardinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/paynowid/v1/Authorize/card"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.params == nil {
		return localVarReturnValue, nil, reportError("params is required and must be specified")
	}
	if r.authHash == nil {
		return localVarReturnValue, nil, reportError("authHash is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("params", parameterToString(*r.params, ""))
	localVarFormParams.Add("authHash", parameterToString(*r.authHash, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPaynowidV1CancelCardinfoRequest struct {
	ctx context.Context
	ApiService *CardApiService
	params *string
	authHash *string
}

func (r ApiPaynowidV1CancelCardinfoRequest) Params(params string) ApiPaynowidV1CancelCardinfoRequest {
	r.params = &params
	return r
}

func (r ApiPaynowidV1CancelCardinfoRequest) AuthHash(authHash string) ApiPaynowidV1CancelCardinfoRequest {
	r.authHash = &authHash
	return r
}

func (r ApiPaynowidV1CancelCardinfoRequest) Execute() (*CardCancelResponse, *http.Response, error) {
	return r.ApiService.PaynowidV1CancelCardinfoExecute(r)
}

/*
PaynowidV1CancelCardinfo 決済のキャンセルを行います

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPaynowidV1CancelCardinfoRequest
*/
func (a *CardApiService) PaynowidV1CancelCardinfo(ctx context.Context) ApiPaynowidV1CancelCardinfoRequest {
	return ApiPaynowidV1CancelCardinfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CardCancelResponse
func (a *CardApiService) PaynowidV1CancelCardinfoExecute(r ApiPaynowidV1CancelCardinfoRequest) (*CardCancelResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardCancelResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardApiService.PaynowidV1CancelCardinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/paynowid/v1/Cancel/card"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.params == nil {
		return localVarReturnValue, nil, reportError("params is required and must be specified")
	}
	if r.authHash == nil {
		return localVarReturnValue, nil, reportError("authHash is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("params", parameterToString(*r.params, ""))
	localVarFormParams.Add("authHash", parameterToString(*r.authHash, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPaynowidV1CaptureCardinfoRequest struct {
	ctx context.Context
	ApiService *CardApiService
	params *string
	authHash *string
}

func (r ApiPaynowidV1CaptureCardinfoRequest) Params(params string) ApiPaynowidV1CaptureCardinfoRequest {
	r.params = &params
	return r
}

func (r ApiPaynowidV1CaptureCardinfoRequest) AuthHash(authHash string) ApiPaynowidV1CaptureCardinfoRequest {
	r.authHash = &authHash
	return r
}

func (r ApiPaynowidV1CaptureCardinfoRequest) Execute() (*CardCaptureResponse, *http.Response, error) {
	return r.ApiService.PaynowidV1CaptureCardinfoExecute(r)
}

/*
PaynowidV1CaptureCardinfo 決済の売上確定を行います

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPaynowidV1CaptureCardinfoRequest
*/
func (a *CardApiService) PaynowidV1CaptureCardinfo(ctx context.Context) ApiPaynowidV1CaptureCardinfoRequest {
	return ApiPaynowidV1CaptureCardinfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CardCaptureResponse
func (a *CardApiService) PaynowidV1CaptureCardinfoExecute(r ApiPaynowidV1CaptureCardinfoRequest) (*CardCaptureResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardCaptureResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardApiService.PaynowidV1CaptureCardinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/paynowid/v1/Capture/card"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.params == nil {
		return localVarReturnValue, nil, reportError("params is required and must be specified")
	}
	if r.authHash == nil {
		return localVarReturnValue, nil, reportError("authHash is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("params", parameterToString(*r.params, ""))
	localVarFormParams.Add("authHash", parameterToString(*r.authHash, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPaynowidV1ReAuthorizeCardinfoRequest struct {
	ctx context.Context
	ApiService *CardApiService
	params *string
	authHash *string
}

func (r ApiPaynowidV1ReAuthorizeCardinfoRequest) Params(params string) ApiPaynowidV1ReAuthorizeCardinfoRequest {
	r.params = &params
	return r
}

func (r ApiPaynowidV1ReAuthorizeCardinfoRequest) AuthHash(authHash string) ApiPaynowidV1ReAuthorizeCardinfoRequest {
	r.authHash = &authHash
	return r
}

func (r ApiPaynowidV1ReAuthorizeCardinfoRequest) Execute() (*CardAuthorizeResponse, *http.Response, error) {
	return r.ApiService.PaynowidV1ReAuthorizeCardinfoExecute(r)
}

/*
PaynowidV1ReAuthorizeCardinfo 決済の再与信を行います

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPaynowidV1ReAuthorizeCardinfoRequest
*/
func (a *CardApiService) PaynowidV1ReAuthorizeCardinfo(ctx context.Context) ApiPaynowidV1ReAuthorizeCardinfoRequest {
	return ApiPaynowidV1ReAuthorizeCardinfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CardAuthorizeResponse
func (a *CardApiService) PaynowidV1ReAuthorizeCardinfoExecute(r ApiPaynowidV1ReAuthorizeCardinfoRequest) (*CardAuthorizeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardAuthorizeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardApiService.PaynowidV1ReAuthorizeCardinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/paynowid/v1/ReAuthorize/card"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.params == nil {
		return localVarReturnValue, nil, reportError("params is required and must be specified")
	}
	if r.authHash == nil {
		return localVarReturnValue, nil, reportError("authHash is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("params", parameterToString(*r.params, ""))
	localVarFormParams.Add("authHash", parameterToString(*r.authHash, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
