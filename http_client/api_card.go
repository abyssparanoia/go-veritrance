/*
Veritrance API

Veritrance API 

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package veritrance_paynow

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// CardApiService CardApi service
type CardApiService service

type ApiPaynowV2AuthorizeCardinfoRequest struct {
	ctx context.Context
	ApiService *CardApiService
	params *CardAuthorizeRequest
	authHash *string
}

func (r ApiPaynowV2AuthorizeCardinfoRequest) Params(params CardAuthorizeRequest) ApiPaynowV2AuthorizeCardinfoRequest {
	r.params = &params
	return r
}

func (r ApiPaynowV2AuthorizeCardinfoRequest) AuthHash(authHash string) ApiPaynowV2AuthorizeCardinfoRequest {
	r.authHash = &authHash
	return r
}

func (r ApiPaynowV2AuthorizeCardinfoRequest) Execute() (*CardAuthorizeResponse, *http.Response, error) {
	return r.ApiService.PaynowV2AuthorizeCardinfoExecute(r)
}

/*
PaynowV2AuthorizeCardinfo 決済の与信を行います

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPaynowV2AuthorizeCardinfoRequest
*/
func (a *CardApiService) PaynowV2AuthorizeCardinfo(ctx context.Context) ApiPaynowV2AuthorizeCardinfoRequest {
	return ApiPaynowV2AuthorizeCardinfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CardAuthorizeResponse
func (a *CardApiService) PaynowV2AuthorizeCardinfoExecute(r ApiPaynowV2AuthorizeCardinfoRequest) (*CardAuthorizeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardAuthorizeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardApiService.PaynowV2AuthorizeCardinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/paynow/v2/Authorize/card"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.params != nil {
		paramJson, err := parameterToJson(*r.params)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("params", paramJson)
	}
	if r.authHash != nil {
		localVarFormParams.Add("authHash", parameterToString(*r.authHash, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPaynowV2CancelCardinfoRequest struct {
	ctx context.Context
	ApiService *CardApiService
	params *CardCancelRequest
	authHash *string
}

func (r ApiPaynowV2CancelCardinfoRequest) Params(params CardCancelRequest) ApiPaynowV2CancelCardinfoRequest {
	r.params = &params
	return r
}

func (r ApiPaynowV2CancelCardinfoRequest) AuthHash(authHash string) ApiPaynowV2CancelCardinfoRequest {
	r.authHash = &authHash
	return r
}

func (r ApiPaynowV2CancelCardinfoRequest) Execute() (*CardCancelResponse, *http.Response, error) {
	return r.ApiService.PaynowV2CancelCardinfoExecute(r)
}

/*
PaynowV2CancelCardinfo 決済のキャンセルを行います

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPaynowV2CancelCardinfoRequest
*/
func (a *CardApiService) PaynowV2CancelCardinfo(ctx context.Context) ApiPaynowV2CancelCardinfoRequest {
	return ApiPaynowV2CancelCardinfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CardCancelResponse
func (a *CardApiService) PaynowV2CancelCardinfoExecute(r ApiPaynowV2CancelCardinfoRequest) (*CardCancelResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardCancelResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardApiService.PaynowV2CancelCardinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/paynow/v2/Cancel/card"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.params != nil {
		paramJson, err := parameterToJson(*r.params)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("params", paramJson)
	}
	if r.authHash != nil {
		localVarFormParams.Add("authHash", parameterToString(*r.authHash, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPaynowV2CaptureCardinfoRequest struct {
	ctx context.Context
	ApiService *CardApiService
	params *CardCaptureRequest
	authHash *string
}

func (r ApiPaynowV2CaptureCardinfoRequest) Params(params CardCaptureRequest) ApiPaynowV2CaptureCardinfoRequest {
	r.params = &params
	return r
}

func (r ApiPaynowV2CaptureCardinfoRequest) AuthHash(authHash string) ApiPaynowV2CaptureCardinfoRequest {
	r.authHash = &authHash
	return r
}

func (r ApiPaynowV2CaptureCardinfoRequest) Execute() (*CardCaptureResponse, *http.Response, error) {
	return r.ApiService.PaynowV2CaptureCardinfoExecute(r)
}

/*
PaynowV2CaptureCardinfo 決済の売上確定を行います

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPaynowV2CaptureCardinfoRequest
*/
func (a *CardApiService) PaynowV2CaptureCardinfo(ctx context.Context) ApiPaynowV2CaptureCardinfoRequest {
	return ApiPaynowV2CaptureCardinfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CardCaptureResponse
func (a *CardApiService) PaynowV2CaptureCardinfoExecute(r ApiPaynowV2CaptureCardinfoRequest) (*CardCaptureResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardCaptureResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardApiService.PaynowV2CaptureCardinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/paynow/v2/Capture/card"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.params != nil {
		paramJson, err := parameterToJson(*r.params)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("params", paramJson)
	}
	if r.authHash != nil {
		localVarFormParams.Add("authHash", parameterToString(*r.authHash, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPaynowV2ReAuthorizeCardinfoRequest struct {
	ctx context.Context
	ApiService *CardApiService
	params *CardReAuthorizeRequest
	authHash *string
}

func (r ApiPaynowV2ReAuthorizeCardinfoRequest) Params(params CardReAuthorizeRequest) ApiPaynowV2ReAuthorizeCardinfoRequest {
	r.params = &params
	return r
}

func (r ApiPaynowV2ReAuthorizeCardinfoRequest) AuthHash(authHash string) ApiPaynowV2ReAuthorizeCardinfoRequest {
	r.authHash = &authHash
	return r
}

func (r ApiPaynowV2ReAuthorizeCardinfoRequest) Execute() (*CardAuthorizeResponse, *http.Response, error) {
	return r.ApiService.PaynowV2ReAuthorizeCardinfoExecute(r)
}

/*
PaynowV2ReAuthorizeCardinfo 決済の再与信を行います

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPaynowV2ReAuthorizeCardinfoRequest
*/
func (a *CardApiService) PaynowV2ReAuthorizeCardinfo(ctx context.Context) ApiPaynowV2ReAuthorizeCardinfoRequest {
	return ApiPaynowV2ReAuthorizeCardinfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CardAuthorizeResponse
func (a *CardApiService) PaynowV2ReAuthorizeCardinfoExecute(r ApiPaynowV2ReAuthorizeCardinfoRequest) (*CardAuthorizeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardAuthorizeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardApiService.PaynowV2ReAuthorizeCardinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/paynow/v2/ReAuthorize/card"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.params != nil {
		paramJson, err := parameterToJson(*r.params)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("params", paramJson)
	}
	if r.authHash != nil {
		localVarFormParams.Add("authHash", parameterToString(*r.authHash, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
