/*
Veritrance API

Veritrance API Requestの形式はcomponentsを参照。文字列にしたものを各Requestのparamsに用いる 

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package veritrance_paynow

import (
	"encoding/json"
	"fmt"
)

// CurrencyUnit 通貨コード
type CurrencyUnit string

// List of CurrencyUnit
const (
	USD CurrencyUnit = "usd"
	JPY CurrencyUnit = "jpy"
)

// All allowed values of CurrencyUnit enum
var AllowedCurrencyUnitEnumValues = []CurrencyUnit{
	"usd",
	"jpy",
}

func (v *CurrencyUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CurrencyUnit(value)
	for _, existing := range AllowedCurrencyUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CurrencyUnit", value)
}

// NewCurrencyUnitFromValue returns a pointer to a valid CurrencyUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCurrencyUnitFromValue(v string) (*CurrencyUnit, error) {
	ev := CurrencyUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CurrencyUnit: valid values are %v", v, AllowedCurrencyUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CurrencyUnit) IsValid() bool {
	for _, existing := range AllowedCurrencyUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CurrencyUnit value
func (v CurrencyUnit) Ptr() *CurrencyUnit {
	return &v
}

type NullableCurrencyUnit struct {
	value *CurrencyUnit
	isSet bool
}

func (v NullableCurrencyUnit) Get() *CurrencyUnit {
	return v.value
}

func (v *NullableCurrencyUnit) Set(val *CurrencyUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyUnit(val *CurrencyUnit) *NullableCurrencyUnit {
	return &NullableCurrencyUnit{value: val, isSet: true}
}

func (v NullableCurrencyUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

