/*
Veritrance API

Veritrance API Requestの形式はcomponentsを参照。文字列にしたものを各Requestのparamsに用いる 

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package veritrance_paynow

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// CardinfoApiService CardinfoApi service
type CardinfoApiService service

type ApiPaynowV1AddCardinfoRequest struct {
	ctx context.Context
	ApiService *CardinfoApiService
	params *string
	authHash *string
}

func (r ApiPaynowV1AddCardinfoRequest) Params(params string) ApiPaynowV1AddCardinfoRequest {
	r.params = &params
	return r
}

func (r ApiPaynowV1AddCardinfoRequest) AuthHash(authHash string) ApiPaynowV1AddCardinfoRequest {
	r.authHash = &authHash
	return r
}

func (r ApiPaynowV1AddCardinfoRequest) Execute() (*AccountResponse, *http.Response, error) {
	return r.ApiService.PaynowV1AddCardinfoExecute(r)
}

/*
PaynowV1AddCardinfo 会員 ID にカード情報を紐付けて登録します

・会員 ID にカード情報を紐付けて登録します。
・当該会員 ID に複数のカード情報を紐付けることが可能です。 ただし、同じカード情報を 2 回登録することはできません。
  （一度削除したカード情報を、再度登録することは可能です）


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPaynowV1AddCardinfoRequest
*/
func (a *CardinfoApiService) PaynowV1AddCardinfo(ctx context.Context) ApiPaynowV1AddCardinfoRequest {
	return ApiPaynowV1AddCardinfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountResponse
func (a *CardinfoApiService) PaynowV1AddCardinfoExecute(r ApiPaynowV1AddCardinfoRequest) (*AccountResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardinfoApiService.PaynowV1AddCardinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/paynow/v1/Add/cardinfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.params == nil {
		return localVarReturnValue, nil, reportError("params is required and must be specified")
	}
	if r.authHash == nil {
		return localVarReturnValue, nil, reportError("authHash is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("params", parameterToString(*r.params, ""))
	localVarFormParams.Add("authHash", parameterToString(*r.authHash, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPaynowV1DeleteCardinfoRequest struct {
	ctx context.Context
	ApiService *CardinfoApiService
	params *string
	authHash *string
}

func (r ApiPaynowV1DeleteCardinfoRequest) Params(params string) ApiPaynowV1DeleteCardinfoRequest {
	r.params = &params
	return r
}

func (r ApiPaynowV1DeleteCardinfoRequest) AuthHash(authHash string) ApiPaynowV1DeleteCardinfoRequest {
	r.authHash = &authHash
	return r
}

func (r ApiPaynowV1DeleteCardinfoRequest) Execute() (*PayNowIdResponse, *http.Response, error) {
	return r.ApiService.PaynowV1DeleteCardinfoExecute(r)
}

/*
PaynowV1DeleteCardinfo 会員 ID に紐付けられたカード情報を削除します

・会員 ID に紐付けられたカード情報を削除します。


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPaynowV1DeleteCardinfoRequest
*/
func (a *CardinfoApiService) PaynowV1DeleteCardinfo(ctx context.Context) ApiPaynowV1DeleteCardinfoRequest {
	return ApiPaynowV1DeleteCardinfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PayNowIdResponse
func (a *CardinfoApiService) PaynowV1DeleteCardinfoExecute(r ApiPaynowV1DeleteCardinfoRequest) (*PayNowIdResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PayNowIdResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardinfoApiService.PaynowV1DeleteCardinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/paynow/v1/Delete/cardinfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.params == nil {
		return localVarReturnValue, nil, reportError("params is required and must be specified")
	}
	if r.authHash == nil {
		return localVarReturnValue, nil, reportError("authHash is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("params", parameterToString(*r.params, ""))
	localVarFormParams.Add("authHash", parameterToString(*r.authHash, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPaynowV1GetCardinfoRequest struct {
	ctx context.Context
	ApiService *CardinfoApiService
	params *string
	authHash *string
}

func (r ApiPaynowV1GetCardinfoRequest) Params(params string) ApiPaynowV1GetCardinfoRequest {
	r.params = &params
	return r
}

func (r ApiPaynowV1GetCardinfoRequest) AuthHash(authHash string) ApiPaynowV1GetCardinfoRequest {
	r.authHash = &authHash
	return r
}

func (r ApiPaynowV1GetCardinfoRequest) Execute() (*AccountResponse, *http.Response, error) {
	return r.ApiService.PaynowV1GetCardinfoExecute(r)
}

/*
PaynowV1GetCardinfo 会員 ID に紐付けられた課金情報を取得します

・会員 ID に紐付けられた課金情報を取得します。


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPaynowV1GetCardinfoRequest
*/
func (a *CardinfoApiService) PaynowV1GetCardinfo(ctx context.Context) ApiPaynowV1GetCardinfoRequest {
	return ApiPaynowV1GetCardinfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountResponse
func (a *CardinfoApiService) PaynowV1GetCardinfoExecute(r ApiPaynowV1GetCardinfoRequest) (*AccountResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardinfoApiService.PaynowV1GetCardinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/paynow/v1/Get/cardinfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.params == nil {
		return localVarReturnValue, nil, reportError("params is required and must be specified")
	}
	if r.authHash == nil {
		return localVarReturnValue, nil, reportError("authHash is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("params", parameterToString(*r.params, ""))
	localVarFormParams.Add("authHash", parameterToString(*r.authHash, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPaynowV1UpdateCardinfoRequest struct {
	ctx context.Context
	ApiService *CardinfoApiService
	params *string
	authHash *string
}

func (r ApiPaynowV1UpdateCardinfoRequest) Params(params string) ApiPaynowV1UpdateCardinfoRequest {
	r.params = &params
	return r
}

func (r ApiPaynowV1UpdateCardinfoRequest) AuthHash(authHash string) ApiPaynowV1UpdateCardinfoRequest {
	r.authHash = &authHash
	return r
}

func (r ApiPaynowV1UpdateCardinfoRequest) Execute() (*AccountResponse, *http.Response, error) {
	return r.ApiService.PaynowV1UpdateCardinfoExecute(r)
}

/*
PaynowV1UpdateCardinfo 当該会員 ID、およびカード ID に紐付けられたカード情報を更新します

・当該会員 ID、およびカード ID に紐付けられたカード情報を更新します。 


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPaynowV1UpdateCardinfoRequest
*/
func (a *CardinfoApiService) PaynowV1UpdateCardinfo(ctx context.Context) ApiPaynowV1UpdateCardinfoRequest {
	return ApiPaynowV1UpdateCardinfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountResponse
func (a *CardinfoApiService) PaynowV1UpdateCardinfoExecute(r ApiPaynowV1UpdateCardinfoRequest) (*AccountResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardinfoApiService.PaynowV1UpdateCardinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/paynow/v1/Update/cardinfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.params == nil {
		return localVarReturnValue, nil, reportError("params is required and must be specified")
	}
	if r.authHash == nil {
		return localVarReturnValue, nil, reportError("authHash is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("params", parameterToString(*r.params, ""))
	localVarFormParams.Add("authHash", parameterToString(*r.authHash, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
