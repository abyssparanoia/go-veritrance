/*
Veritrance API

Veritrance API Requestの形式はcomponentsを参照。文字列にしたものを各Requestのparamsに用いる 

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package veritrance_paynow

import (
	"encoding/json"
)

// Result struct for Result
type Result struct {
	// 要求電文を送信した決済サービスタイプ
	ServiceType string `json:"serviceType"`
	Status Status `json:"status"`
	// 処理の結果を詳細に表すコード 4 桁ずつ 4 つのブロックで構成され、各ブロックでサービス毎の処理結果を表します。 
	VResultCode string `json:"vResultCode"`
	// 処理結果を日本語で表示します。
	MerrMsg *string `json:"merrMsg,omitempty"`
}

// NewResult instantiates a new Result object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResult(serviceType string, status Status, vResultCode string) *Result {
	this := Result{}
	this.ServiceType = serviceType
	this.Status = status
	this.VResultCode = vResultCode
	return &this
}

// NewResultWithDefaults instantiates a new Result object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultWithDefaults() *Result {
	this := Result{}
	return &this
}

// GetServiceType returns the ServiceType field value
func (o *Result) GetServiceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value
// and a boolean to check if the value has been set.
func (o *Result) GetServiceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceType, true
}

// SetServiceType sets field value
func (o *Result) SetServiceType(v string) {
	o.ServiceType = v
}

// GetStatus returns the Status field value
func (o *Result) GetStatus() Status {
	if o == nil {
		var ret Status
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Result) GetStatusOk() (*Status, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Result) SetStatus(v Status) {
	o.Status = v
}

// GetVResultCode returns the VResultCode field value
func (o *Result) GetVResultCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VResultCode
}

// GetVResultCodeOk returns a tuple with the VResultCode field value
// and a boolean to check if the value has been set.
func (o *Result) GetVResultCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VResultCode, true
}

// SetVResultCode sets field value
func (o *Result) SetVResultCode(v string) {
	o.VResultCode = v
}

// GetMerrMsg returns the MerrMsg field value if set, zero value otherwise.
func (o *Result) GetMerrMsg() string {
	if o == nil || o.MerrMsg == nil {
		var ret string
		return ret
	}
	return *o.MerrMsg
}

// GetMerrMsgOk returns a tuple with the MerrMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetMerrMsgOk() (*string, bool) {
	if o == nil || o.MerrMsg == nil {
		return nil, false
	}
	return o.MerrMsg, true
}

// HasMerrMsg returns a boolean if a field has been set.
func (o *Result) HasMerrMsg() bool {
	if o != nil && o.MerrMsg != nil {
		return true
	}

	return false
}

// SetMerrMsg gets a reference to the given string and assigns it to the MerrMsg field.
func (o *Result) SetMerrMsg(v string) {
	o.MerrMsg = &v
}

func (o Result) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["serviceType"] = o.ServiceType
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["vResultCode"] = o.VResultCode
	}
	if o.MerrMsg != nil {
		toSerialize["merrMsg"] = o.MerrMsg
	}
	return json.Marshal(toSerialize)
}

type NullableResult struct {
	value *Result
	isSet bool
}

func (v NullableResult) Get() *Result {
	return v.value
}

func (v *NullableResult) Set(val *Result) {
	v.value = val
	v.isSet = true
}

func (v NullableResult) IsSet() bool {
	return v.isSet
}

func (v *NullableResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResult(val *Result) *NullableResult {
	return &NullableResult{value: val, isSet: true}
}

func (v NullableResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


